1차 22-06-19 Fail
회고:
1) 처음 DP문제라는 것을 인지-> 브루트포스로 공주가 있는 곳에서부터 시작해서 원래 기사가 있던 곳까지 가는 코드는 대충 성공했음
그러나 이걸 DP로 할 때 많은 문제점이 있었음.
-> 함수 변수에 nowHealth라는, 현재 기사의 체력을 저장해 놓은 변수가 있었는데 이걸 일단 어떻게 처리할 방법을 못찾음.
2) 그래서 Discussion을 참고하니, 
-> Recursion풀이:(0,0)에서 부터 시작 
-> Iterative풀이:(m-1, n-1)에서 부터 시작.
이었음.

3)Recursion 풀이:
-> 모든 DP 배열을 -1로 초기화 한다.
-> 재귀 함수는 다음과 같은 로직으로 작동한다.
  ->(0,0)부터 시작해서 공주가 있는 곳까지, 오른쪽과 아래 방향으로 내려간다. 그 때 마다 dp[i][j]를 갱신하는 방식이다.
  ->현재 (i, j)에서 공주가 있는 곳까지 가기 위한 최소 피통을 health라고 하자. 이는 right와 down으로 갔을 때 각각 비용의 최소에다가
  dungeon[i][j]를 빼준 것이 필요한 최소 비용이 된다.
  -> 그 전에! health가 INT_MAX였다면? health를 1로 수정해야 한다. health가 INT_MAX인 경우는 공주의 위치를 말한다. 
  공주의 위치에서 health가 1만 있으면 된다.
  ->그리고, health에서 현재 dungeon[i][j]값을 빼주는 것이 우리가 필요한 최소비용이라고 했다. 근데 이게 양수라면? 그게 답이 되고,
  만약 음수라면??
  예를 들어, health가 5이고, dungeon[0][0]가 7 이라고 하자. 이떄 -2가 되는데 초기 기사의 체력은 반드시 1 이상이여야 한다.
  그래서 마지막에 이게 음수라면 1로 조정하게 되는 것이다. 
  (0, 0)뿐만이 아니라 각 (i, j)에서도 해당된다.
  
  근데 의문점이 들은게..
  왜 health - dungeon[i][j]가 음수면 1로 설정할까?
  답은 쉽다! 왜냐하면 어떤 경로가 양수밖에 없다고 생각해보자. 그러면 체력약만 빨다가 공주 만나는거니까
  health를 1 이상 설정할 필요가 없다.
  무슨말이냐, 현재의 health보다 dungeon[i][j] 가 더 크면? (i, j)부터 공주까지 갈때는 성공을 보장한다는 얘기니까,
  (i, j)를 도착했을 때는 기사가 죽기 직전이어도 상관없다는 얘기겠다!

  
4)Recursive + DP 풀이:
Cache[i][j] = (i, j)부터 공주의 위치까지 가는데 필요한 기사의 최소 피통.

5)Iteration 풀이:
저거 풀어서 쓴건데, 좋은 Discussion에서 풀이를 가져왔다.
dungeon[i][j]의 값을 바로바로 수정하는 방식.

🎈의문점
왜 마지막에 abs, 절댓값을 씌워줄까?
이는 https://leetcode.com/problems/dungeon-game/discuss/1498636/C%2B%2B-solution-with-image-explaination 여기를 참고하면 된다.
만약 (0, 0)까지 왔을 때, dungeon[i][j] = -10이라고 해보자.
얘는 공주 구할려고 10만큼 소모한 것이다.
그렇다면 마지막에는 10 + 1이 있어야 겠지.

/*
    
    // RECURSIVE APPROACH
class Solution {
public:
    int helper(int i,int j,int m,int n,vector<vector<int>> &dungeon){
        if(i>=m || j>=n) return INT_MAX;
        int right=helper(i,j+1,m,n,dungeon);
        int down=helper(i+1,j,m,n,dungeon);
        int health=min(right,down);
        if(health==INT_MAX){
            health=1;
        }
        
        int res=0;
        if(health-dungeon[i][j]>0){
            res=health-dungeon[i][j];
        }
        else{
            res=1;
        }
        return res;
    }
    int calculateMinimumHP(vector<vector<int>>& dungeon) {
        return helper(0,0,dungeon.size(),dungeon[0].size(),dungeon);
    }
};

// MEMOIZATION
class Solution {
public:
    int dp[201][201];
    int helper(int i,int j,int m,int n,vector<vector<int>> &dungeon){
        if(i>=m || j>=n) return INT_MAX;
        if(dp[i][j]!=-1) return dp[i][j];
        int right=helper(i,j+1,m,n,dungeon);
        int down=helper(i+1,j,m,n,dungeon);
        int health=min(right,down);
        if(health==INT_MAX){
            health=1;
        }
        
        int res=0;
        if(health-dungeon[i][j]>0){
            res=health-dungeon[i][j];
        }
        else{
            res=1;
        }
        return dp[i][j]=res;
    }
    int calculateMinimumHP(vector<vector<int>>& dungeon) {
        memset(dp,-1,sizeof(dp));
        return helper(0,0,dungeon.size(),dungeon[0].size(),dungeon);
    }
};

//Iterative
int calculateMinimumHP(vector<vector<int>>& dungeon) {
        int n=dungeon.size(),m=dungeon[0].size();
        for(int i=n-1;i>=0;--i){
            for(int j=m-1;j>=0;--j){
                if(i==n-1 && j==m-1) dungeon[i][j]=dungeon[i][j];
                else if(i==n-1) dungeon[i][j]+=dungeon[i][j+1];
                else if(j==m-1) dungeon[i][j]+=dungeon[i+1][j];
                else dungeon[i][j]+=max(dungeon[i][j+1],dungeon[i+1][j]);
                
                if(dungeon[i][j]>0) dungeon[i][j]=0;
            }
        }
        return abs(dungeon[0][0])+1;
    }

  
