1.
3분
string의 배열 words와
string s가 주어진다.
words[i]와 s는 영어 소문자로만 이루어져 있다.

s의 전치사인 모든 문자열이 words에 몇개 존재하는지 리턴해라.

제한:
words의 길이는 1000이하
words[i].length, s.length는 10 이하

해결방법:
unordered_set<string>을 해서 모든 prefix에 대해 저장, 
그리고 words[i]를 순회하면서 찾으면 된다.

2.
13분
길이 n인 정수 배열 nums가 주어진다.
i의 average difference는 다음과 같이 정의된다.
1) 첫 i+1개의 요소들의 평균
2) 마지막 n-i-1개의 요소들의 평균
1)과 2)의 절댓값이 average difference이다.
두개의 평균은 rounded down, 즉 내림 해야 한다.

이때 minimum average difference인 인덱스를 리턴해라.
만약 이러한 인덱스가 여러개 있을 경우, smallest one을 리턴해라.

제한:
nums의 길이는 십만 이하
nums[i]는 0 이상 십만 이하

해결 방법:
Sum 배열을 만든다. Sum[i] = sumOf(nums[0] to nums[i])
i의 average difference는 
1) a = sum[i] / (i+1)
2) b = (sum.back() - sum[i]) / (n-i-1)
abs(a-b)

유의할 점 : 
1) 최악의 경우, 십만 * 십만 = 10^10 -> 자료형 초과된다.
2) 그리고 i가 n-1일 경우, b = 0이 되어 버린다. 이 경우 예외처리를 해 주어야 한다. b = 0으로!

3. 
못푼 이유?
사방 탐색 할 때 예외처리 할 떄 wall을 만나는 것 뿐만 아니라 guard를 만나는 것 또한 예외처리 해주어야 했음.

m과 n 정수가 주어진다.
guards와 walls라는 2차원 정수 배열도 주어진다.
guards[i]는 사방으로 볼 수 있는데, 만약 어떤 cell이 다른 guards[i]에 의해 보여지기만 한다면 그 cell은 보호가 된다.
이때 보호되지 않은, 비어있는 셀의 수를 반환해라.
즉, guards[i]에 의해 보여지지도 않고, W나 G가 아닌 애들의 수를 반환해라.

제한:
m과 n은 십만 이하
m * n은 십만 이하
guards.length와 walls.length는 1 이상 5만 이하
guards.length + walls.length는 2 이상 m * n 이하
guards와 walls의 position들은 모두 unique 하다

해결 방법:
mat[i][j] = 0 -> clear
mat[i][j] = 1 -> guard
mat[i][j] = 2 -> wall
mat[i][j] = 3 -> seen

1) guards를 queue에 넣고, 2차원 배열을 수정하는 방법.
-> guards를 순회하면서 queue에 넣는다. O(m)
	-> 그때 마다 2차원 배열을 수정한다. (m + n)
-> matrix를 순회하면서 조건에 맞는 개수를 센다. O(m * n)
->최악 O(m^2). 이러면 m이 십만이라면 백억이 되어버림. (X)


4.
못푼이유?
-> 답은 fire distance와 person steps의 difference이다. 이걸 떠올리지 못했고,
-> fire distance는 마찬가지로 어떤 불에서 부터 safeHouse까지의 가장 가까운 거리
-> person steps = house steps까지의 최단 거리
-> 걍 존 ㅇ나 어려운 문제...

grid라는 2차원 정수 배열 m*n은 field의 상태를 나타낸다.
0 = grass
1 = fire
2 = wall(fire과 내가 지나갈 수 없다)

초기 위치는 왼쪽 맨 위이고, 이는 (0, 0)이다.
오른쪽 아래의 안전한 곳으로 이동하고 싶다. 이는 (m-1, n-1)이다.
매 분 마다, 인접한 grass cell로 이동할 수 있다, 너가 움직일 때 마다 모든 fire cell은 사방으로 퍼진다.
이떄, 너가 살아서 돌아갈 수 있다고 가정할 때,
현재 위치에서 최대한 몇분까지 있을 수 있는지를 리턴해라.

만약 불가능 하다면 -1을 리턴해라.
또는 아무리 기다려도 괜찮다면, 10^9를 리턴해라!

제한:
m과 n은 2 이상 300 이하,
m * n은 2만 이하.

해결방법:
1) 차근차근 생각해보자.
-> 어떨 때 불가능할까?
-> 어떨 때 아무리 기다려도 괜찮을까?
-> 그렇지 않다면?

->정리:
q1에다가 초기에 불의 위치를 넣는다.
그리고 q2도 동시에 선언한다. 이는 q1에서 초기 불의 위치가 근처로 퍼질 때, 추가적인 불의 위치까지 저장하는 애 이다.
q2에는 중복이 들어가지 않게 해야 된다. 이는 matrix에서 바로 확인할 수 있다. 기존에 불이 있는 곳이거나 이미 퍼진 곳이면 넣지 않는다.
어찌저찌 q2에 값을 넣었을 떄, q1과 q2가 똑같다면 더 이상 불이 퍼지지 않는다는 얘기 이므로 아무리 기다려도 괜찮다.
이러면 아무리 기다려도 괜찮은 경우는 해결할 수 있다.




